{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["get","axios","App","props","state","data","setNewData","bind","setStartDate","setEndDate","checkboxMovement","clearUrl","url","this","storedUrl","window","prompt","Cookies","set","rawRows","split","rows","map","CSV","row","push","fetchData","then","console","log","catch","err","error","newData","sum","forEach","element","index","numeral","value","momentDate","moment","date","format","dateMillis","toDate","getTime","motive","toLowerCase","ammount","sum_display","parseFloat","Number","toFixed","accounted","movements","setState","parseNewMovements","setMovements","filterdMovements","recalculateData","getFilteredMovements","byMonths","groupByMonths","mothlySummary","getMothlySummary","newState","cushion","getCushionMonths","length","startDate","Date","endDate","startMonth","startOf","endMonth","months","arrangedMonths","currentMonth","clone","add","sorted","month","sortedRecord","filter","skipped","movement","isSame","processed","earnings","expenses","resulting","totalAverageEarnings","reduce","accumulator","currentValue","totalAverageExpenses","total","filtered","endDateMillis","startDateMillis","startIndex","endIndex","isNaN","slice","Math","floor","number","round2","accumulated","averageMothlyExpenses","current","JSON","parse","stringify","location","reload","containerId","document","getElementById","offsetWidth","Container","id","Button","onClick","dateFormat","selected","onChange","LineChart","width","getWidth","height","chartHeight","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","BarChart","getGeneralMothlyBarChart","Bar","fill","Table","Form","Group","controlId","Check","label","checked","innerHeight","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gjBAcOA,EAAOC,IAAPD,IAmYQE,EAjYf,kDAKC,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IALPC,MAAQ,CACPC,KAAM,MAKN,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,SAAW,EAAKA,SAASJ,KAAd,gBANE,EALpB,uLAuBMK,EAAMC,KAAKC,aAEdD,KAAKC,UAAYC,OAAOC,OAAO,mCAC/BJ,EAAMC,KAAKC,UACXG,IAAQC,IAAI,MAAON,IA3BtB,SA6BuBZ,EAAIY,GA7B3B,uBA6BSP,EA7BT,EA6BSA,KACDc,EAAUd,EAAKe,MAAM,MACrBC,EAAO,GACbF,EAAQG,KAAI,SAACjB,GACZkB,OAASlB,EAAM,KAAK,SAAAmB,GACnBH,EAAKI,KAAKD,SAlCd,kBAqCSH,GArCT,iJAwCsB,IAAD,OAEnBR,KAAKa,YACJC,MAAK,SAACtB,GACNuB,QAAQC,IAAI,CAACxB,SACb,EAAKC,WAAWD,MACdyB,OAAM,SAACC,GACTH,QAAQI,MAAM,CAACD,aA/ClB,wCAsDmB1B,GACjB,IAAI4B,EAAU,GACVC,EAAM,EAiBV,OAhBA7B,EAAK8B,SAAQ,SAACC,EAASC,GACtB,GAAa,GAATA,EAAJ,CAGAH,GAAOI,IAAQF,EAAQ,IAAIG,QAC3B,IAAIC,EAAaC,IAAOL,EAAQ,GAAI,cACpCH,EAAQR,KAAK,CACZiB,KAAMF,EAAWG,OAAO,cACxBC,WAAYJ,EAAWK,SAASC,UAChCC,OAAQX,EAAQ,GAAGY,cACnBC,QAASX,IAAQF,EAAQ,IAAIG,QAC7BL,IAAKA,EACLgB,YAAaC,WAAWC,OAAOlB,GAAKmB,QAAQ,IAC5CC,WAAW,QAGNrB,IAzET,sCA4EiBsB,GACf,IAAIrB,EAAM,EACND,EAAU,GAiBd,OAhBAsB,EAAUpB,SAAQ,SAACC,EAASC,GAC3B,GAAa,GAATA,EAAJ,CAGAH,GAAOE,EAAQa,QACf,IAAIT,EAAaC,IAAOL,EAAQM,KAAM,cACtCT,EAAQR,KAAK,CACZiB,KAAMF,EAAWG,OAAO,cACxBC,WAAYJ,EAAWK,SAASC,UAChCC,OAAQX,EAAQW,OAAOC,cACvBC,QAASb,EAAQa,QACjBf,MACAgB,YAAaC,WAAWC,OAAOlB,GAAKmB,QAAQ,IAC5CC,UAAWlB,EAAQkB,gBAGdrB,IA/FT,iCAkGY5B,GAAO,IAAD,OAChBuB,QAAQC,IAAI,CAACxB,SACbQ,KAAK2C,SAAS,CACbD,UAAW1C,KAAK4C,kBAAkBpD,KAChC,kBAAI,EAAKqD,oBAtGd,qCA0GE,IAAMH,EAAY1C,KAAKT,MAAMmD,UACvBI,EAAmB9C,KAAK+C,gBAAgB/C,KAAKgD,qBAAqBN,IAClEO,EAAWjD,KAAKkD,cAAcJ,GAC9BK,EAAgBnD,KAAKoD,iBAAiBH,GAEtCI,EAAW,CAChBP,mBACAG,WACAE,gBACAG,QALatD,KAAKuD,iBAAiBJ,EAAeL,EAAiBA,EAAiBU,OAAS,GAAGnC,KAMhGoC,UAAW,IAAIC,KAAKhB,EAAU,GAAGX,YACjC4B,QAAS,IAAID,KAAKhB,EAAUA,EAAUc,OAAS,GAAGzB,aAEnD/B,KAAK2C,SAASU,KAvHhB,mCA0HcxB,GACZ7B,KAAK2C,SAAS,CACbc,UAAW5B,MA5Hd,iCAgIYA,GACV7B,KAAK2C,SAAS,CACbgB,QAAS9B,MAlIZ,oCA0Iea,GACb,IAAIkB,EAAahC,IAAOc,EAAU,GAAGb,KAAM,cAAcgC,QAAQ,SAC7DC,EAAWlC,IAAOc,EAAUA,EAAUc,OAAS,GAAG3B,KAAM,cAAcgC,QAAQ,SAE9EE,EAAS,GACTC,GAAiB,EACjBC,EAAeL,EACnB,GACKK,EAAajC,SAASC,WAAa6B,EAAS9B,SAASC,WACxD+B,GAAiB,EACjBD,EAAOnD,KAAKqD,EAAaC,WAG1BH,EAAOnD,KAAKqD,EAAaC,SACzBD,EAAeA,EAAaE,IAAI,IAAK,SAASN,QAAQ,iBAC7CG,GAEV,IAAII,EAASL,EAAOtD,KAAI,SAAAc,GACvB,MAAO,CACN8C,MAAO9C,EACPmB,UAAW,OAUb,OANA0B,EAAO9C,SAAQ,SAACgD,EAAc9C,GAC7B8C,EAAa5B,UAAYA,EAAU6B,QAAO,SAAAhD,GAAO,OAAOA,EAAQiD,WAASD,QAAO,SAAAE,GAC/E,OAAOH,EAAaD,MAAMK,OAAO,IAAIhB,KAAKe,EAAS1C,YAAa,eAI3DqC,IAxKT,uCA2KkBnB,GAChB,IAAI0B,EAAY1B,EAASxC,KAAI,SAAC4D,EAAO7C,GACpC,IAAIoD,EAAW,EAAGC,EAAW,EAW7B,OAVAR,EAAM3B,UAAU6B,QAAO,SAAAhD,GACtB,OAAQA,EAAQa,QAAU,KACxBd,SAAQ,SAAAC,GACVqD,GAAYrD,EAAQa,WAErBiC,EAAM3B,UAAU6B,QAAO,SAAAhD,GACtB,OAAQA,EAAQa,QAAU,KACxBd,SAAQ,SAAAC,GACVsD,GAAYtD,EAAQa,WAEd,2BACHiC,GADJ,IAECO,WACAC,WACAC,UAAWF,EAAWC,OAGpBE,EAAuBJ,EAAUlE,KAAI,SAAAc,GAAO,OAAIA,EAAQqD,YAAUI,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,KAAgBP,EAAUnB,OAChJ2B,EAAuBR,EAAUlE,KAAI,SAAAc,GAAO,OAAIA,EAAQsD,YAAUG,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,KAAgBP,EAAUnB,OACpJ,MAAO,CACN4B,MAAOT,EACPI,uBACAI,0BApMH,2CAwMsB3F,GACpB,IAAI6F,EAAW7F,EACX8F,EAAgBtF,KAAKT,MAAMoE,SAAW3D,KAAKT,MAAMoE,QAAQ1B,UACzDsD,EAAkBvF,KAAKT,MAAMoE,SAAW3D,KAAKT,MAAMkE,UAAUxB,UAC7DuD,EAAa,KAAMC,EAAW,KA4BlC,OA3BAJ,EAAS/D,SAAQ,SAACC,EAASC,GAEzB+D,GACChE,EAAQQ,YAAcwD,GACN,MAAdC,IAEHA,EAAahE,GAIb8D,GACC/D,EAAQQ,YAAcuD,GACR,MAAZG,IAEHA,EAAWjE,EAAQ,MAGJ,MAAdgE,GAAuBE,MAAMF,IAA6B,MAAdA,GAAuBE,MAAMD,KAC3EJ,EAAWA,EAASM,MAAMH,EAAYC,IAAa,IAQpDJ,GANAA,EAAWA,EAAS5E,KAAI,SAAAc,GAIvB,OAHkC,KAA/BqE,KAAKC,MAAMtE,EAAQa,WACrBb,EAAQiD,SAAU,GAEZjD,MAEYgD,QAAO,SAAAhD,GAAO,OAAOA,EAAQiD,aAvOnD,6BA2OQsB,GACN,OAAOxD,WAAWC,OAAOuD,GAAQtD,QAAQ,MA5O3C,iDA+O4B,IAAD,OAEzB,OAAOxC,KAAKT,MAAM4D,cACjBiC,MAAM3E,KAAI,SAAAc,GACV,MAAO,CACNqD,SAAU,EAAKmB,OAAOxE,EAAQqD,UAC9BC,SAAU,EAAKkB,QAAyB,EAAlBxE,EAAQsD,UAC9BC,UAAW,EAAKiB,OAAOxE,EAAQuD,WAC/BjD,KAAMN,EAAQ8C,MAAMvC,OAAO,iBAvP/B,uCA4PkBqB,EAAe6C,GAC/B,IAAIxC,EAASL,EAAciC,MAAM5B,OAE7ByC,EAAwB9C,EAAciC,MACxCO,MAAMnC,EAFY,EAEYA,EAAO,GACrC/C,KAAI,SAAAc,GAAO,OAAIA,EAAQsD,YACvBG,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,KAEtD,OADAe,EAAwBjG,KAAK+F,OAAOE,EALhB,GAMbjG,KAAK+F,OAAQC,EAAcC,GAAwB,KApQ5D,uCAuQkBzE,GAAO,IAAD,OACtBxB,KAAK2C,UAAS,SAACuD,GACd,IAAIxD,EAAYyD,KAAKC,MAAMD,KAAKE,UAAUH,EAAQxD,YAElD,OADAA,EAAUlB,GAAOgD,SAAa9B,EAAUlB,GAAOgD,QACxC,CACN9B,gBAEC,WACF,EAAKG,oBA/QR,iCAoRE7C,KAAKC,UAAY,GACjBC,OAAOoG,SAASC,WArRlB,+BAwRUC,GACR,OAAOC,SAASC,eAAeF,IAAgBC,SAASC,eAAeF,GAAaG,aAAe,MAzRrG,+BAgSW,IAAD,OAER,OACC,gCACC,eAACC,EAAA,EAAD,CAAWC,GAAG,YAAd,UACC,8CACA,cAACC,EAAA,EAAD,CAAQC,QAAS/G,KAAKF,SAAtB,0BAE8D,6BAE9DE,KAAKT,MAAMuD,kBAAoB,eAAC8D,EAAA,EAAD,CAAWC,GAAG,YAAd,UAC9B,2CACA,cAAC,IAAD,CAAYG,WAAY,aAAcC,SAAUjH,KAAKT,MAAMkE,UAAWyD,SAAUlH,KAAKL,eACrF,cAAC,IAAD,CAAYqH,WAAY,aAAcC,SAAUjH,KAAKT,MAAMoE,QAASuD,SAAUlH,KAAKJ,aACnF,eAACuH,EAAA,EAAD,CAAWC,MAAOpH,KAAKqH,SAAS,aAAcC,OAAQtH,KAAKuH,YAAa/H,KAAMQ,KAAKT,MAAMuD,iBACxF0E,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADhD,UAEC,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,UAAUM,OAAO,YAC/C,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,MAAMM,OAAO,mBAE7B,6BAGhBtI,KAAKT,MAAM4D,eAAiB,eAACyD,EAAA,EAAD,CAAWC,GAAG,YAAd,UAC3B,4DACA,eAAC0B,EAAA,EAAD,CAAUnB,MAAOpH,KAAKqH,SAAS,aAAcC,OAAQtH,KAAKuH,YAAa/H,KAAMQ,KAAKwI,2BAAlF,UACC,cAACX,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACM,EAAA,EAAD,CAAKT,QAAQ,WAAWU,KAAK,UAC7B,cAACD,EAAA,EAAD,CAAKT,QAAQ,WAAWU,KAAK,QAC7B,cAACD,EAAA,EAAD,CAAKT,QAAQ,YAAYU,KAAK,gBAEhB,8BAGfnG,OAAOmD,MAAM1F,KAAKT,MAAM+D,UAAY,eAACsD,EAAA,EAAD,WACpC,gFAAkD,yFAClD,+BAAK5G,KAAKT,MAAM+D,QAAhB,gBAIDtD,KAAKT,MAAMmD,WAAa,cAACkE,EAAA,EAAD,UACvB,eAAC+B,EAAA,EAAD,WACC,gCACC,+BACC,yCACA,sCACA,0CACA,wCACA,sDAGF,gCAEE3I,KAAKT,MAAMmD,UAAUjC,KAAI,SAACc,EAASC,GAAV,OACxB,+BACC,6BACC,cAACoH,EAAA,EAAD,UACC,cAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,UAAtB,SACC,cAACF,EAAA,EAAKG,MAAN,CAAYlC,GAAE,kBAAarF,GAC3B6G,KAAK,WACLW,MAAM,WACN9B,SAAU,kBAAI,EAAKrH,iBAAiB2B,IACpCyH,SAAU1H,EAAQiD,gBAIrB,6BACEjD,EAAQM,OAEV,6BACEN,EAAQa,UAEV,6BACEb,EAAQW,SAEV,6BACEX,EAAQc,gBAtBFb,cA4BW,kCA1X9B,gCAeE,OAAOpB,IAAQjB,IAAI,QAfrB,aAkBeY,GACbK,IAAQC,IAAI,MAAON,KAnBrB,kCA6RE,OAAOG,OAAOgJ,YAAc,MA7R9B,GAAyBC,IAAMC,WCJhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzI,MAAK,YAAkD,IAA/C0I,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASC,eAAe,SAM1B2C,M","file":"static/js/main.585afab7.chunk.js","sourcesContent":["import moment from 'moment';\nimport React from 'react';\nimport CSVReader from 'react-csv-reader';\nimport numeral from 'numeral';\nimport { Bar, BarChart, CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Container, Form, Table } from 'react-bootstrap';\nimport * as axios from 'axios'\nimport * as CSV from \"csv-string\";\nimport Cookies from 'js-cookie'\n\n\nconst {get} = axios.default;\n\nexport class App extends React.Component {\n\tstate = {\n\t\tdata: null\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.setNewData = this.setNewData.bind(this);\n\t\tthis.setStartDate = this.setStartDate.bind(this);\n\t\tthis.setEndDate = this.setEndDate.bind(this);\n\t\tthis.checkboxMovement = this.checkboxMovement.bind(this);\n\t\tthis.clearUrl = this.clearUrl.bind(this);\n\t}\n\n\tget storedUrl(){\n\t\treturn Cookies.get('url');\n\t}\n\n\tset storedUrl(url){\n\t\tCookies.set(\"url\", url);\n\t}\n\n\tasync fetchData(){\n\t\tlet url = this.storedUrl;\n\t\tif(!url){\n\t\t\tthis.storedUrl = window.prompt(\"Please enter the URL to search:\")\n\t\t\turl = this.storedUrl;\n\t\t\tCookies.set(\"url\", url);\n\t\t}\n\t\tconst {data} = await get(url);\n\t\tconst rawRows = data.split(\"\\n\");\n\t\tconst rows = [];\n\t\trawRows.map((data)=>{\n\t\t\tCSV.read(data, ',', row => {\n\t\t\t\trows.push(row);\n\t\t\t});\n\t\t})\n\t\treturn rows;\n\t}\n\n\tcomponentDidMount() {\n\t\t//this.setNewData(data);\n\t\tthis.fetchData()\n\t\t.then((data)=>{\n\t\t\tconsole.log({data});\n\t\t\tthis.setNewData(data);\n\t\t}).catch((err)=>{\n\t\t\tconsole.error({err});\n\t\t})\n\t}\n\n\t/**\n\t * @description Parses the data from  a CSV \n\t */\n\tparseNewMovements(data){\n\t\tlet newData = [];\n\t\tlet sum = 0;\n\t\tdata.forEach((element, index) => {\n\t\t\tif (index == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsum += numeral(element[2]).value();\n\t\t\tlet momentDate = moment(element[0], \"DD/MM/YYYY\");\n\t\t\tnewData.push({\n\t\t\t\tdate: momentDate.format(\"DD/MM/YYYY\"),\n\t\t\t\tdateMillis: momentDate.toDate().getTime(),\n\t\t\t\tmotive: element[1].toLowerCase(),\n\t\t\t\tammount: numeral(element[2]).value(),\n\t\t\t\tsum: sum,\n\t\t\t\tsum_display: parseFloat(Number(sum).toFixed(2)),\n\t\t\t\taccounted: true\n\t\t\t});\n\t\t});\n\t\treturn newData;\n\t}\n\n\trecalculateData(movements){\n\t\tlet sum = 0;\n\t\tlet newData = [];\n\t\tmovements.forEach((element, index) => {\n\t\t\tif (index == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsum += element.ammount;\n\t\t\tlet momentDate = moment(element.date, \"DD/MM/YYYY\");\n\t\t\tnewData.push({\n\t\t\t\tdate: momentDate.format(\"DD/MM/YYYY\"),\n\t\t\t\tdateMillis: momentDate.toDate().getTime(),\n\t\t\t\tmotive: element.motive.toLowerCase(),\n\t\t\t\tammount: element.ammount,\n\t\t\t\tsum,\n\t\t\t\tsum_display: parseFloat(Number(sum).toFixed(2)),\n\t\t\t\taccounted: element.accounted\n\t\t\t});\n\t\t});\n\t\treturn newData;\n\t}\n\n\tsetNewData(data) {\n\t\tconsole.log({data});\n\t\tthis.setState({\n\t\t\tmovements: this.parseNewMovements(data)\n\t\t}, ()=>this.setMovements());\n\t}\n\n\tsetMovements(){\n\t\tconst movements = this.state.movements;\n\t\tconst filterdMovements = this.recalculateData(this.getFilteredMovements(movements));\n\t\tconst byMonths = this.groupByMonths(filterdMovements);\n\t\tconst mothlySummary = this.getMothlySummary(byMonths);\n\t\tlet cushion = this.getCushionMonths(mothlySummary, filterdMovements[filterdMovements.length - 1].sum);\n\t\tconst newState = {\n\t\t\tfilterdMovements,\n\t\t\tbyMonths,\n\t\t\tmothlySummary,\n\t\t\tcushion,\n\t\t\tstartDate: new Date(movements[0].dateMillis),\n\t\t\tendDate: new Date(movements[movements.length - 1].dateMillis)\n\t\t};\n\t\tthis.setState(newState);\n\t}\n\n\tsetStartDate(date) {\n\t\tthis.setState({\n\t\t\tstartDate: date\n\t\t})\n\t}\n\n\tsetEndDate(date) {\n\t\tthis.setState({\n\t\t\tendDate: date\n\t\t})\n\t}\n\n\t/**\n\t * \n\t * @param {{\"date\":string,\"dateMillis\":number,\"motive\":string,\"ammount\":number,\"sum\":number,\"sum_display\":number}[]} movements \n\t */\n\tgroupByMonths(movements) {\n\t\tlet startMonth = moment(movements[0].date, \"DD/MM/YYYY\").startOf(\"month\");\n\t\tlet endMonth = moment(movements[movements.length - 1].date, \"DD/MM/YYYY\").startOf(\"month\");\n\n\t\tlet months = [];\n\t\tlet arrangedMonths = false;\n\t\tlet currentMonth = startMonth;\n\t\tdo {\n\t\t\tif (currentMonth.toDate().getTime() >= endMonth.toDate().getTime()) {\n\t\t\t\tarrangedMonths = true;\n\t\t\t\tmonths.push(currentMonth.clone());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmonths.push(currentMonth.clone());\n\t\t\tcurrentMonth = currentMonth.add(\"1\", \"month\").startOf(\"month\");\n\t\t} while (!arrangedMonths);\n\n\t\tlet sorted = months.map(element => {\n\t\t\treturn {\n\t\t\t\tmonth: element,\n\t\t\t\tmovements: []\n\t\t\t}\n\t\t});\n\n\t\tsorted.forEach((sortedRecord, index) => {\n\t\t\tsortedRecord.movements = movements.filter(element => !!!element.skipped).filter(movement => {\n\t\t\t\treturn sortedRecord.month.isSame(new Date(movement.dateMillis), \"month\");\n\t\t\t})\n\t\t});\n\n\t\treturn sorted;\n\t}\n\n\tgetMothlySummary(byMonths) {\n\t\tlet processed = byMonths.map((month, index) => {\n\t\t\tlet earnings = 0, expenses = 0;\n\t\t\tmonth.movements.filter(element => {\n\t\t\t\treturn (element.ammount > 0)\n\t\t\t}).forEach(element => {\n\t\t\t\tearnings += element.ammount;\n\t\t\t});\n\t\t\tmonth.movements.filter(element => {\n\t\t\t\treturn (element.ammount < 0)\n\t\t\t}).forEach(element => {\n\t\t\t\texpenses += element.ammount;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...month,\n\t\t\t\tearnings,\n\t\t\t\texpenses,\n\t\t\t\tresulting: earnings + expenses\n\t\t\t};\n\t\t});\n\t\tlet totalAverageEarnings = processed.map(element => element.earnings).reduce((accumulator, currentValue) => accumulator + currentValue) / processed.length;\n\t\tlet totalAverageExpenses = processed.map(element => element.expenses).reduce((accumulator, currentValue) => accumulator + currentValue) / processed.length;\n\t\treturn {\n\t\t\ttotal: processed,\n\t\t\ttotalAverageEarnings,\n\t\t\ttotalAverageExpenses\n\t\t}\n\t}\n\n\tgetFilteredMovements(data) {\n\t\tlet filtered = data;\n\t\tlet endDateMillis = this.state.endDate && this.state.endDate.getTime();\n\t\tlet startDateMillis = this.state.endDate && this.state.startDate.getTime();\n\t\tlet startIndex = null, endIndex = null;\n\t\tfiltered.forEach((element, index) => {\n\t\t\tif (\n\t\t\t\tstartDateMillis &&\n\t\t\t\t(element.dateMillis >= startDateMillis)\n\t\t\t\t&& startIndex == null\n\t\t\t) {\n\t\t\t\tstartIndex = index;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tendDateMillis &&\n\t\t\t\t(element.dateMillis >= endDateMillis)\n\t\t\t\t&& endIndex == null\n\t\t\t) {\n\t\t\t\tendIndex = index + 1;\n\t\t\t}\n\t\t});\n\t\tif(startIndex != null && !isNaN(startIndex) && startIndex != null && !isNaN(endIndex)){\n\t\t\tfiltered = filtered.slice(startIndex, endIndex) || [];\n\t\t}\n\t\tfiltered = filtered.map(element => {\n\t\t\tif(Math.floor(element.ammount) == 150){\t//We set all the ammounts for 150 to skipped.\n\t\t\t\telement.skipped = true;\n\t\t\t}\n\t\t\treturn element\n\t\t});\n\t\tfiltered = filtered.filter(element => !!!element.skipped);\n\t\treturn filtered;\n\t}\n\n\tround2(number){\n\t\treturn parseFloat(Number(number).toFixed(2));\n\t}\n\n\tgetGeneralMothlyBarChart(){\n\t\t//mothlySummary\n\t\treturn this.state.mothlySummary\n\t\t.total.map(element => {\n\t\t\treturn {\n\t\t\t\tearnings: this.round2(element.earnings),\n\t\t\t\texpenses: this.round2(element.expenses*-1),\n\t\t\t\tresulting: this.round2(element.resulting),\n\t\t\t\tdate: element.month.format(\"MM/YYYY\"),\n\t\t\t}\n\t\t})\n\t}\n\n\tgetCushionMonths(mothlySummary, accumulated){\n\t\tlet length = mothlySummary.total.length;\n\t\tlet compareMonths = 4;\n\t\tlet averageMothlyExpenses = mothlySummary.total\n\t\t\t.slice(length - compareMonths, length+1)\n\t\t\t.map(element => element.expenses)\n\t\t\t.reduce((accumulator, currentValue) => accumulator + currentValue);\n\t\taverageMothlyExpenses = this.round2(averageMothlyExpenses / compareMonths);\n\t\treturn this.round2((accumulated / averageMothlyExpenses)*-1);\n\t}\n\n\tcheckboxMovement(index){\n\t\tthis.setState((current)=>{\n\t\t\tlet movements = JSON.parse(JSON.stringify(current.movements));\n\t\t\tmovements[index].skipped = !!!movements[index].skipped;\n\t\t\treturn {\n\t\t\t\tmovements\n\t\t\t};\n\t\t}, () => {\n\t\t\tthis.setMovements();\n\t\t})\n\t}\n\n\tclearUrl(){\n\t\tthis.storedUrl = \"\";\n\t\twindow.location.reload();\n\t}\n\n\tgetWidth(containerId){\n\t\treturn document.getElementById(containerId) && document.getElementById(containerId).offsetWidth || 400;\n\t}\n\n\tget chartHeight(){\n\t\treturn window.innerHeight / 3;\n\t}\n\n\trender() {\n\t\tconst fileSource = false;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container id=\"movement1\">\n\t\t\t\t\t<h1>Main Balance</h1>\n\t\t\t\t\t<Button onClick={this.clearUrl}>Clear URL</Button>\n\t\t\t\t</Container>\n\t\t\t\t{fileSource && <CSVReader onFileLoaded={this.setNewData} /> || <></>}\n\t\t\t\t{\n\t\t\t\t\tthis.state.filterdMovements && <Container id=\"movement2\">\n\t\t\t\t\t\t<h3>Movements</h3>\n\t\t\t\t\t\t<DatePicker dateFormat={\"dd/MM/yyyy\"} selected={this.state.startDate} onChange={this.setStartDate} />\n\t\t\t\t\t\t<DatePicker dateFormat={\"dd/MM/yyyy\"} selected={this.state.endDate} onChange={this.setEndDate} />\n\t\t\t\t\t\t<LineChart width={this.getWidth(\"movement1\")} height={this.chartHeight} data={this.state.filterdMovements}\n\t\t\t\t\t\t\tmargin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t<XAxis dataKey=\"date\" />\n\t\t\t\t\t\t\t<YAxis />\n\t\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"ammount\" stroke=\"#8884d8\" />\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"sum\" stroke=\"#82ca9d\" />\n\t\t\t\t\t\t</LineChart>\n\t\t\t\t\t</Container> || <></>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tthis.state.mothlySummary && <Container id=\"movement3\">\n\t\t\t\t\t\t<h3>Mothly Expenses / Earnings</h3>\n\t\t\t\t\t\t<BarChart width={this.getWidth(\"movement1\")} height={this.chartHeight} data={this.getGeneralMothlyBarChart()}>\n\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t<XAxis dataKey=\"date\" />\n\t\t\t\t\t\t\t<YAxis />\n\t\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t<Bar dataKey=\"earnings\" fill=\"green\" />\n\t\t\t\t\t\t\t<Bar dataKey=\"expenses\" fill=\"red\" />\n\t\t\t\t\t\t\t<Bar dataKey=\"resulting\" fill=\"blue\" />\n\t\t\t\t\t\t</BarChart>\n\t\t\t\t\t</Container> || <></>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t!Number.isNaN(this.state.cushion) && <Container>\n\t\t\t\t\t\t<h3>Expected cushion via last 4 - months averages <small>(expected time to stand without receiving income)</small></h3>\n\t\t\t\t\t\t<h4>{this.state.cushion} months</h4>\n\t\t\t\t\t</Container>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tthis.state.movements && <Container>\n\t\t\t\t\t\t<Table>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>Enabled</td>\n\t\t\t\t\t\t\t\t\t<td>Date</td>\n\t\t\t\t\t\t\t\t\t<td>Movement</td>\n\t\t\t\t\t\t\t\t\t<td>Motive</td>\n\t\t\t\t\t\t\t\t\t<td>Current Balance</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.movements.map((element, index) => (\n\t\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"enabled\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check id={`enabled-${index}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Count in\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={()=>this.checkboxMovement(index)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!element.skipped} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{element.date}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{element.ammount}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{element.motive}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{element.sum_display}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</Table></Container> || <></>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}